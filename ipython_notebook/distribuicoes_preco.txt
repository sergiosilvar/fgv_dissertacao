# http://stackoverflow.com/questions/6615489/fitting-distributions-goodness-of-fit-p-value-is-it-possible-to-do-this-with/16651524#16651524
import scipy
from  scipy import stats
from collections import OrderedDict

size = 20000
x = scipy.arange(size)
# creating the dummy sample (using beta distribution)
y = scipy.int_(scipy.round_(stats.beta.rvs(6,2,size=size)*47))
# creating the histogram
f,a = subplots()
a.hist(y, bins=range(48))
#h = plt.hist(y, bins=range(48))

dist_names = ['alpha', 'beta'
              , 'rayleigh','weibull_max','lognorm']
mles1 = OrderedDict()
for dist_name in dist_names:
    dist = getattr(stats, dist_name)
    param = dist.fit(y)
    pdf_fitted = dist.pdf(x, *param[:-2], loc=param[-2], scale=param[-1]) * size
    a.plot(pdf_fitted, label=dist_name)
    xlim(0,47)
    mles1[dist_name] = dist.nnlf(param, y)
mles1 = sorted(mles1.items(), key=lambda x:x[1])
plt.legend(loc='upper left')


################################################################################


# http://stackoverflow.com/questions/21623717/fit-data-to-all-possible-distributions-and-return-the-best-fit
data = y
data = df.preco
#distributions = [stats.laplace, stats.norm]
dist_names = [ 'alpha', 'anglit', 'arcsine', 'beta', 'betaprime', 'bradford', 'burr', 'cauchy', 'chi', 'chi2', 'cosine', 'dgamma', 'dweibull', 'erlang', 'expon', 'exponweib', 'exponpow', 'f', 'fatiguelife', 'fisk', 'foldcauchy', 'foldnorm', 'frechet_r', 'frechet_l', 'genlogistic', 'genpareto', 'genexpon', 'genextreme', 'gausshyper', 'gamma', 'gengamma', 'genhalflogistic', 'gilbrat', 'gompertz', 'gumbel_r', 'gumbel_l', 'halfcauchy', 'halflogistic', 'halfnorm', 'hypsecant', 'invgamma', 'invgauss', 'invweibull', 'johnsonsb', 'johnsonsu', 'ksone', 'kstwobign', 'laplace', 'logistic', 'loggamma', 'loglaplace', 'lognorm', 'lomax', 'maxwell', 'mielke', 'nakagami', 'ncx2', 'ncf', 'nct', 'norm', 'pareto', 'pearson3', 'powerlaw', 'powerlognorm', 'powernorm', 'rdist', 'reciprocal', 'rayleigh', 'rice', 'recipinvgauss', 'semicircular', 't', 'triang', 'truncexpon', 'truncnorm', 'tukeylambda', 'uniform', 'vonmises', 'wald', 'weibull_min', 'weibull_max', 'wrapcauchy']
#dist_names = ['alpha', 'beta', 'rayleigh','weibull_max', 'norm', 'lognorm']

distributions = [getattr(stats, dist_name) for dist_name in dist_names]

mles = []

for distribution in distributions:
    pars = distribution.fit(data)
    mle = distribution.nnlf(pars, data)
    mles.append(mle)

results = [(distribution.name, mle) for distribution, mle in zip(distributions, mles)]
best_fit = sorted(zip(distributions, mles), key=lambda d: d[1])[0]
print 'Best fit reached using {}, MLE value: {}'.format(best_fit[0].name, best_fit[1])

################################################################################
# KDE GAUSSIAN FIT
from scipy.stats import kde
df = df[df.preco < 10000]
fig, ax = subplots(ncols=1,nrows=2, sharex=True)
fig.set_size_inches(7,10)

boxp = ax[0].boxplot(df.preco,sym='r+',whis=1.5, vert=False);
ax[1].hist(df.preco, normed=True, bins=100);

ykde = kde.gaussian_kde(df.preco);
x = linspace(df.preco.min(),df.preco.max(),200)
ax[1].plot(x,ykde(x),'b-');


################################################################################

[(<scipy.stats.distributions.dweibull_gen at 0xbbec9e8>, -inf),
 (<scipy.stats.distributions.vonmises_gen at 0xbe7f940>, -2735308.9211330866),
 (<scipy.stats.distributions.invgauss_gen at 0xbd13ba8>, 354282.48797348526),
 (<scipy.stats.distributions.fatiguelife_gen at 0xbcfe160>,
  354294.34405531932),
 (<scipy.stats.distributions.johnsonsb_gen at 0xbd18278>, 354322.83221539482),
 (<scipy.stats.distributions.recipinvgauss_gen at 0xbe7c6d8>,
  354359.17024546722),
 (<scipy.stats.distributions.exponweib_gen at 0xbbecd68>, 354373.44497696974),
 (<scipy.stats.distributions.johnsonsu_gen at 0xbd18518>, 354377.65220795432),
 (<scipy.stats.distributions.invweibull_gen at 0xbd18240>, 354846.69781980658),
 (<scipy.stats.distributions.ksone_gen at 0xbbdb320>, nan),
 (<scipy.stats.distributions.powerlognorm_gen at 0xbd2f7b8>,
  354381.10842088843),
 (<scipy.stats.distributions.lognorm_gen at 0xbd226d8>, 354382.20568367647),
 (<scipy.stats.distributions.f_gen at 0xbcfe6a0>, 354484.7860027157),
 (<scipy.stats.distributions.gengamma_gen at 0xbd095c0>, 354645.19125179236),
 (<scipy.stats.distributions.invgamma_gen at 0xbd13c50>, 354645.89926309045),
 (<scipy.stats.distributions.ncf_gen at 0xbd2a518>, 354674.08746526553),
 (<scipy.stats.distributions.genextreme_gen at 0xbd09048>, 354846.69781980512),
 (<scipy.stats.distributions.fisk_gen at 0xbbe7b70>, 355039.64469004737),
 (<scipy.stats.distributions.burr_gen at 0xbbe7898>, 355126.89453479717),
 (<scipy.stats.distributions.betaprime_gen at 0xbbe7320>, 355136.03400085855),
 (<scipy.stats.distributions.genexpon_gen at 0xbd02b70>, 355151.23750367254),
 (<scipy.stats.distributions.alpha_gen at 0xbbdb7f0>, 355284.08498950809),
 (<scipy.stats.distributions.nct_gen at 0xbd2a828>, 355435.29830608179),
 (<scipy.stats.distributions.chi2_gen at 0xbbec2e8>, 355506.78877612064),
 (<scipy.stats.distributions.gamma_gen at 0xbd09080>, 355506.78877612553),
 (<scipy.stats.distributions.pearson3_gen at 0xbd2f278>, 355506.78877612716),
 (<scipy.stats.distributions.erlang_gen at 0xbd09320>, 355506.78877612803),
 (<scipy.stats.distributions.beta_gen at 0xbbe7128>, 355513.25892803562),
 (<scipy.stats.distributions.wald_gen at 0xbe7fcc0>, 355881.48635240633),
 (<scipy.stats.distributions.gausshyper_gen at 0xbd13a58>, 356078.65682688734),
 (<scipy.stats.distributions.frechet_r_gen at 0xbcfebe0>, 356900.71438851807),
 (<scipy.stats.distributions.frechet_r_gen at 0xbd02128>, 356900.71438851807),
 (<scipy.stats.distributions.loglaplace_gen at 0xbd226a0>, 357062.0839786444),
 (<scipy.stats.distributions.gumbel_r_gen at 0xbd13048>, 357961.50690098607),
 (<scipy.stats.distributions.genlogistic_gen at 0xbd026a0>, 357965.8707078459),
 (<scipy.stats.distributions.gilbrat_gen at 0xbd22978>, 358205.28394340095),
 (<scipy.stats.distributions.ncx2_gen at 0xbd2a278>, 358309.98553716083),
 (<scipy.stats.distributions.nakagami_gen at 0xbd2a240>, 358727.16249256668),
 (<scipy.stats.distributions.chi_gen at 0xbbec048>, 358727.1624925668),
 (<scipy.stats.distributions.genhalflogistic_gen at 0xbd09860>,
  358866.66337945411),
 (<scipy.stats.distributions.halflogistic_gen at 0xbd13390>,
  358898.65256108606),
 (<scipy.stats.distributions.kstwobign_gen at 0xbbdb630>, 358942.52352077095),
 (<scipy.stats.distributions.foldcauchy_gen at 0xbcfe400>, 359339.89405730774),
 (<scipy.stats.distributions.halfnorm_gen at 0xbd136d8>, 359515.44354627695),
 (<scipy.stats.distributions.foldnorm_gen at 0xbcfe940>, 359515.91851048166),
 (<scipy.stats.distributions.mielke_gen at 0xbd22e48>, 359566.35538259352),
 (<scipy.stats.distributions.gompertz_gen at 0xbd09b00>, 360017.51737938472),
 (<scipy.stats.distributions.genpareto_gen at 0xbd02668>, 360450.98418076441),
 (<scipy.stats.distributions.exponpow_gen at 0xbcfe128>, 361274.97634089418),
 (<scipy.stats.distributions.rice_gen at 0xbe7c6a0>, 361404.40816784475),
 (<scipy.stats.distributions.rayleigh_gen at 0xbe7c240>, 361404.40816784563),
 (<scipy.stats.distributions.powernorm_gen at 0xbd2fa58>, 361407.54086308752),
 (<scipy.stats.distributions.expon_gen at 0xbbeca20>, 361513.86434941989),
 (<scipy.stats.distributions.lomax_gen at 0xbd2f240>, 361579.86674125248),
 (<scipy.stats.distributions.t_gen at 0xbd2a940>, 363296.43563281558),
 (<scipy.stats.distributions.maxwell_gen at 0xbd22cc0>, 363334.05418320547),
 (<scipy.stats.distributions.dgamma_gen at 0xbbec668>, 364136.53502957482),
 (<scipy.stats.distributions.laplace_gen at 0xbd187b8>, 364166.98797674198),
 (<scipy.stats.distributions.hypsecant_gen at 0xbd13898>, 364347.2286220105),
 (<scipy.stats.distributions.logistic_gen at 0xbd22240>, 365082.15116799681),
 (<scipy.stats.distributions.cauchy_gen at 0xbbe7ba8>, 366089.05552993208),
 (<scipy.stats.distributions.halfcauchy_gen at 0xbd132b0>, 366661.08470923628),
 (<scipy.stats.distributions.frechet_l_gen at 0xbd02198>, 367336.2347171494),
 (<scipy.stats.distributions.frechet_l_gen at 0xbd02160>, 367336.2347171494),
 (<scipy.stats.distributions.norm_gen at 0xbbdb710>, 368737.35115774447),
 (<scipy.stats.distributions.rdist_gen at 0xbd2fcf8>, 369035.97841906396),
 (<scipy.stats.distributions.triang_gen at 0xbe7ccc0>, 378318.43555375101),
 (<scipy.stats.distributions.truncexpon_gen at 0xbe7f080>, 382071.08544958523),
 (<scipy.stats.distributions.gumbel_l_gen at 0xbd13128>, 385110.63582672947),
 (<scipy.stats.distributions.powerlaw_gen at 0xbd2f518>, 385392.4135066446),
 (<scipy.stats.distributions.bradford_gen at 0xbbe7358>, 387259.06758287305),
 (<scipy.stats.distributions.cosine_gen at 0xbbec320>, 395055.17850864795),
 (<scipy.stats.distributions.pareto_gen at 0xbd2af28>, 400662.91882338386),
 (<scipy.stats.distributions.anglit_gen at 0xbbdbc50>, 402401.92320560635),
 (<scipy.stats.distributions.arcsine_gen at 0xbbdbd30>, 402892.39920921222),
 (<scipy.stats.distributions.semicircular_gen at 0xbe7c978>,
  406490.09187133098),
 (<scipy.stats.distributions.loggamma_gen at 0xbd22320>, inf),
 (<scipy.stats.distributions.reciprocal_gen at 0xbe7c320>, inf),
 (<scipy.stats.distributions.truncnorm_gen at 0xbe7f0b8>, inf),
 (<scipy.stats.distributions.tukeylambda_gen at 0xbe7f358>, inf),
 (<scipy.stats.distributions.uniform_gen at 0xbe7f5f8>, inf),
 (<scipy.stats.distributions.wrapcauchy_gen at 0xbe7fda0>, inf)]

################################################################################



